class ContactMessagesManager {
  constructor() {
    this.messages = [];
    this.isLoaded = false;
    console.log('üì© ContactMessagesManager initialized');
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Contact Messages
   */
  async renderContactMessagesPage() {
    try {
      const mainContent = document.getElementById('main-content');
      if (!mainContent) throw new Error('Main content element not found');

      mainContent.innerHTML = this.renderLoadingState();
      await this.loadMessages();
      mainContent.innerHTML = this.renderMessagesHTML();
      this.setupEventHandlers();

      this.isLoaded = true;
      console.log('‚úÖ Contact Messages page loaded');
    } catch (error) {
      console.error('‚ùå Error loading contact messages:', error);
      this.renderErrorState(error.message);
    }
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å API
   */
  async loadMessages() {
    try {
      const response = await fetch('/api/admin/contact-messages');
      if (!response.ok) throw new Error(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status}`);
      const result = await response.json();
      if (result.success) {
        this.messages = result.data;
        console.log('‚úÖ Loaded contact messages:', this.messages);
      } else {
        throw new Error(result.message || '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      }
    } catch (error) {
      console.error('‚ùå Error loading messages:', error);
      this.messages = [];
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Contact Messages
   */
  renderMessagesHTML() {
    return `
      <div class="max-w-5xl mx-auto space-y-8">
        <div class="mb-6">
          <h1 class="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <i data-lucide="mail" class="w-6 h-6"></i> ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤
          </h1>
          <p class="text-sm text-gray-600">‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤</p>
        </div>
        <div class="bg-white rounded-xl shadow-sm p-6">
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">‡∏ä‡∏∑‡πà‡∏≠</th>
                  <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                  <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</th>
                  <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                  <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th class="px-4 py-2"></th>
                </tr>
              </thead>
              <tbody id="contact-messages-list">
                ${this.renderMessagesList()}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  renderMessagesList() {
    if (!this.messages.length) {
      return `<tr><td colspan="6" class="text-center py-8 text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</td></tr>`;
    }
    return this.messages.map(msg => `
      <tr class="border-b">
        <td class="px-4 py-2">${msg.name}</td>
        <td class="px-4 py-2">${msg.email}</td>
        <td class="px-4 py-2">${msg.subject}</td>
        <td class="px-4 py-2">${new Date(msg.created_at).toLocaleString()}</td>
        <td class="px-4 py-2">
          ${msg.is_read 
            ? '<span class="text-green-600">‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>' 
            : '<span class="text-red-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô</span>'}
        </td>
        <td class="px-4 py-2 flex gap-2">
          <button class="text-blue-600 hover:underline" onclick="contactMessagesManager.viewMessage(${msg.id})">‡∏î‡∏π</button>
          <button class="text-red-600 hover:underline" onclick="contactMessagesManager.deleteMessage(${msg.id})">‡∏•‡∏ö</button>
        </td>
      </tr>
    `).join('');
  }

  /**
   * ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  async viewMessage(id) {
    try {
      const res = await fetch(`/api/admin/contact-messages/${id}`);
      const result = await res.json();
      if (!result.success) throw new Error(result.message);
      const msg = result.data;
      // Mark as read
      await fetch(`/api/admin/contact-messages/${id}/read`, { method: 'PUT' });
      // Show details
      Swal.fire({
        title: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`,
        html: `
          <div class="text-left">
            <div><b>‡∏ä‡∏∑‡πà‡∏≠:</b> ${msg.name}</div>
            <div><b>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</b> ${msg.email}</div>
            <div><b>‡πÄ‡∏ö‡∏≠‡∏£‡πå:</b> ${msg.phone || '-'}</div>
            <div><b>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:</b> ${msg.subject}</div>
            <div class="mt-2"><b>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</b><br>${msg.message}</div>
            <div class="mt-2 text-xs text-gray-500">‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(msg.created_at).toLocaleString()}</div>
          </div>
        `,
        confirmButtonText: '‡∏õ‡∏¥‡∏î',
        width: 500
      });
      await this.renderContactMessagesPage();
    } catch (error) {
      Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message, 'error');
    }
  }

  /**
   * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  async deleteMessage(id) {
    const result = await Swal.fire({
      title: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ?',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡∏•‡∏ö',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      confirmButtonColor: '#dc2626'
    });
    if (result.isConfirmed) {
      try {
        await fetch(`/api/admin/contact-messages/${id}`, { method: 'DELETE' });
        await this.renderContactMessagesPage();
        Swal.fire('‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß', 'success');
      } catch (error) {
        Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error.message, 'error');
      }
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (Contact Setting)
   */
  async renderContactSettingPage() {
    const mainContent = document.getElementById('main-content');
    if (!mainContent) return;

    mainContent.innerHTML = this.renderContactSettingForm();
    await this.loadContactSettingForm();
    this.setupContactSettingFormHandler();
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
   */
  renderContactSettingForm() {
    return `
      <div class="max-w-2xl mx-auto py-10">
        <h1 class="text-2xl font-bold mb-6">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</h1>
        <form id="contact-setting-form" class="bg-white p-6 rounded shadow space-y-4">
          <div>
            <label class="block mb-1">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
            <textarea name="address" id="address" class="w-full border rounded p-2"></textarea>
          </div>
          <div>
            <label class="block mb-1">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
            <input name="phone" id="phone" class="w-full border rounded p-2" />
          </div>
          <div>
            <label class="block mb-1">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
            <input name="email" id="email" class="w-full border rounded p-2" />
          </div>


            <div>
            <label class="block mb-1">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£</label>
            <input type="text" name="business_hours_first" id="business_hours_first" class="w-full border rounded p-2" />
            <label class="text-xs text-gray-500">‡∏ñ‡∏∂‡∏á</label>
            <input type="text" name="business_hours_two" id="business_hours_two" class="w-full border rounded p-2" />

          </div>

          <div>
            <label class="block mb-1">Facebook</label>
            <input name="facebook" id="facebook" class="w-full border rounded p-2" />
          </div>
          <div>
            <label class="block mb-1">TikTok</label>
            <input name="tiktok" id="tiktok" class="w-full border rounded p-2" />
          </div>
          <div>
            <label class="block mb-1">LINE</label>
            <input name="line" id="line" class="w-full border rounded p-2" />
          </div>
          
          <div>
            <label class="block mb-1">Google Map Embed (iframe)</label>
            <textarea name="map_embed" id="map_embed" class="w-full border rounded p-2"></textarea>
          </div>
          <button type="submit" class="bg-indigo-600 text-white px-6 py-2 rounded">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
        </form>
      </div>
    `;
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• contact setting ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
   */
  async loadContactSettingForm() {
    const res = await fetch('/api/admin/contact-setting');
    const data = await res.json();
    if (data.success && data.data) {
      Object.entries(data.data).forEach(([k, v]) => {
        if (document.getElementById(k)) document.getElementById(k).value = v || '';
      });
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö submit ‡∏ü‡∏≠‡∏£‡πå‡∏°
   */
  setupContactSettingFormHandler() {
    const form = document.getElementById('contact-setting-form');
    if (!form) return;
    form.onsubmit = async (e) => {
      e.preventDefault();
      const payload = {
        address: form.address.value,
        phone: form.phone.value,
        email: form.email.value,
        business_hours_first: form.business_hours_first.value,
        business_hours_two: form.business_hours_two.value,
        facebook: form.facebook.value,
        line: form.line.value,
        tiktok: form.tiktok.value,
        map_embed: form.map_embed.value
      };
      const res = await fetch('/api/admin/contact-setting', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const result = await res.json();
      if (result.success) {
        Swal.fire('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '', 'success');
      } else {
        Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', result.message, 'error');
      }
    };
  }

  /**
   * Setup Event Handlers (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
   */
  setupEventHandlers() {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event handler ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  }

  /**
   * Render Loading State
   */
  renderLoadingState() {
    return `
      <div class="flex items-center justify-center h-64">
        <div class="text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p class="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠...</p>
        </div>
      </div>
    `;
  }

  /**
   * Render Error State
   */
  renderErrorState(errorMessage) {
    const mainContent = document.getElementById('main-content');
    if (mainContent) {
      mainContent.innerHTML = `
        <div class="text-center py-12">
          <div class="text-red-500 mb-4">
            <i data-lucide="alert-circle" class="w-12 h-12 mx-auto mb-2"></i>
            <h3 class="text-lg font-medium">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
            <p class="text-sm mt-2">${errorMessage}</p>
          </div>
          <button 
            onclick="contactMessagesManager.renderContactMessagesPage()" 
            class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg"
          >
            ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </button>
        </div>
      `;
      if (typeof lucide !== 'undefined') lucide.createIcons();
    }
  }
}

// Export class to global scope
window.ContactMessagesManager = ContactMessagesManager;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance global
if (!window.contactMessagesManager) {
  window.contactMessagesManager = new ContactMessagesManager();
}