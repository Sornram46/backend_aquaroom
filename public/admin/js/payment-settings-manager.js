/**
 * Payment Settings Management System
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Admin
 */

class PaymentSettingsManager {
  constructor() {
    this.settings = null;
    this.isLoaded = false;
    this.bankAccounts = [];
    this.promptpaySettings = {};
    
    console.log('üí≥ PaymentSettingsManager initialized');
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Payment Settings
   */
  async renderPaymentSettingsPage() {
    try {
      console.log('üí≥ Loading Payment Settings page...');
      
      const mainContent = document.getElementById('main-content');
      if (!mainContent) {
        throw new Error('Main content element not found');
      }

      // ‡πÅ‡∏™‡∏î‡∏á loading state
      mainContent.innerHTML = this.renderLoadingState();

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
      await this.loadPaymentSettings();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
      mainContent.innerHTML = this.renderPaymentSettingsHTML();

      // Setup event handlers
      this.setupEventHandlers();

      // ‡πÇ‡∏´‡∏•‡∏î icons
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }

      this.isLoaded = true;
      console.log('‚úÖ Payment Settings page loaded successfully');

    } catch (error) {
      console.error('‚ùå Error loading Payment Settings:', error);
      this.renderErrorState(error.message);
    }
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å API
   */
  async loadPaymentSettings() {
    try {
      console.log('üì° Loading payment settings from API...');
      
      const response = await fetch('/api/admin/payment-settings');
      if (!response.ok) {
        throw new Error(`Failed to load payment settings: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        this.settings = result.data;
        console.log('‚úÖ Payment settings loaded:', this.settings);
      } else {
        throw new Error(result.message || 'Failed to load payment settings');
      }

    } catch (error) {
      console.error('‚ùå Error loading payment settings:', error);
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      this.settings = this.getDefaultSettings();
    }
  }

  /**
   * ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
   */
  getDefaultSettings() {
    return {
      // PromptPay Settings
      promptpay_enabled: false,
      promptpay_id: '',
      promptpay_name: '',
      promptpay_qr_type: 'phone', // 'phone' ‡∏´‡∏£‡∏∑‡∏≠ 'tax_id'
      
      // Bank Transfer Settings
      bank_transfer_enabled: true,
      bank_accounts: [],
      
      // Credit Card Settings (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
      credit_card_enabled: false,
      
      // Cash on Delivery
      cod_enabled: false,
      cod_fee: 0,
      cod_max_amount: 0,
      
      // Auto-verification
      auto_verify_enabled: false,
      auto_verify_amount_limit: 10000,
      
      // Other settings
      payment_timeout_hours: 24,
      require_payment_proof: true
    };
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Payment Settings
   */
  renderPaymentSettingsHTML() {
    return `
      <div class="max-w-6xl mx-auto space-y-8">
        <!-- Header -->
        <div class="mb-6">
          <div class="flex items-center space-x-4">
            <button 
              onclick="window.history.back()" 
              class="text-gray-400 hover:text-gray-600"
              title="‡∏Å‡∏•‡∏±‡∏ö"
            >
              <i data-lucide="arrow-left" class="w-5 h-5"></i>
            </button>
            <div>
              <h1 class="text-2xl font-bold text-gray-900">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
              <p class="text-sm text-gray-600">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ</p>
            </div>
          </div>
        </div>

        <!-- Payment Methods Overview -->
        ${this.renderPaymentMethodsOverview()}

        <!-- PromptPay Settings -->
        ${this.renderPromptPaySettings()}

        <!-- Bank Transfer Settings -->
        ${this.renderBankTransferSettings()}

        <!-- Cash on Delivery Settings -->
        ${this.renderCODSettings()}

        <!-- Auto-Verification Settings -->
        ${this.renderAutoVerificationSettings()}

        <!-- General Settings -->
        ${this.renderGeneralSettings()}

        <!-- Save Button -->
        <div class="flex justify-end space-x-3 pt-6 border-t">
          <button 
            type="button" 
            onclick="paymentSettingsManager.resetSettings()" 
            class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
          >
            ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
          </button>
          <button 
            type="button" 
            onclick="paymentSettingsManager.saveAllSettings()" 
            id="save-payment-settings-btn"
            class="px-6 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg font-medium flex items-center"
          >
            <span id="save-payment-settings-text">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</span>
            <svg id="save-payment-settings-loading" class="hidden animate-spin ml-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
        </div>
      </div>
    `;
  }

  /**
   * ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
   */
  renderPaymentMethodsOverview() {
    const methods = [
      {
        id: 'promptpay',
        name: 'PromptPay QR Code',
        enabled: this.settings?.promptpay_enabled || false,
        icon: 'qr-code',
        color: 'blue'
      },
      {
        id: 'bank_transfer',
        name: '‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
        enabled: this.settings?.bank_transfer_enabled || false,
        icon: 'building-2',
        color: 'green'
      },
      {
        id: 'cod',
        name: '‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
        enabled: this.settings?.cod_enabled || false,
        icon: 'truck',
        color: 'orange'
      },
      {
        id: 'credit_card',
        name: '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï',
        enabled: this.settings?.credit_card_enabled || false,
        icon: 'credit-card',
        color: 'purple'
      }
    ];

    return `
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h2 class="text-xl font-bold mb-6 text-indigo-700 flex items-center gap-2">
          <i data-lucide="credit-card" class="w-5 h-5"></i> ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          ${methods.map(method => `
            <div class="border border-gray-200 rounded-lg p-4 text-center">
              <div class="w-12 h-12 mx-auto mb-3 rounded-full bg-${method.color}-100 flex items-center justify-center">
                <i data-lucide="${method.icon}" class="w-6 h-6 text-${method.color}-600"></i>
              </div>
              <h3 class="font-semibold text-gray-900 mb-2">${method.name}</h3>
              <div class="flex items-center justify-center">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  method.enabled 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-gray-100 text-gray-800'
                }">
                  ${method.enabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                </span>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  /**
   * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PromptPay
   */
  renderPromptPaySettings() {
    return `
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h2 class="text-xl font-bold mb-6 text-indigo-700 flex items-center gap-2">
          <i data-lucide="qr-code" class="w-5 h-5"></i> PromptPay QR Code
        </h2>
        
        <div class="space-y-6">
          <!-- Enable/Disable -->
          <div class="flex items-center justify-between p-4 bg-blue-50 rounded-lg">
            <div>
              <h3 class="font-semibold text-gray-900">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô PromptPay</h3>
              <p class="text-sm text-gray-600">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
            </div>
            <label class="relative inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                id="promptpay-enabled"
                ${this.settings?.promptpay_enabled ? 'checked' : ''}
                class="sr-only peer"
                onchange="paymentSettingsManager.togglePromptPay(this.checked)"
              >
              <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>

          <!-- PromptPay Settings Form -->
          <div id="promptpay-settings-form" class="${!this.settings?.promptpay_enabled ? 'hidden' : ''}">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- QR Type -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó PromptPay</label>
                <select 
                  id="promptpay-qr-type"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="phone" ${this.settings?.promptpay_qr_type === 'phone' ? 'selected' : ''}>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</option>
                  <option value="tax_id" ${this.settings?.promptpay_qr_type === 'tax_id' ? 'selected' : ''}>‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ</option>
                </select>
              </div>

              <!-- PromptPay ID -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  <span id="promptpay-id-label">
                    ${this.settings?.promptpay_qr_type === 'tax_id' ? '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ' : '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå'}
                  </span>
                </label>
                <input 
                  type="text" 
                  id="promptpay-id"
                  value="${this.settings?.promptpay_id || ''}"
                  placeholder="${this.settings?.promptpay_qr_type === 'tax_id' ? '1234567890123' : '0812345678'}"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <!-- Account Name -->
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</label>
                <input 
                  type="text" 
                  id="promptpay-name"
                  value="${this.settings?.promptpay_name || ''}"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ PromptPay"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            <!-- QR Code Preview -->
            <div class="mt-6 p-4 border border-gray-200 rounded-lg">
              <h4 class="font-semibold text-gray-900 mb-3">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á QR Code</h4>
              <div id="qr-code-preview" class="flex items-center justify-center h-32 bg-gray-50 rounded border-2 border-dashed border-gray-300">
                <span class="text-gray-500 text-sm">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PromptPay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code</span>
              </div>
              <button 
                type="button" 
                onclick="paymentSettingsManager.generateQRPreview()"
                class="mt-3 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
              >
                ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
   */
  renderBankTransferSettings() {
    return `
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h2 class="text-xl font-bold mb-6 text-indigo-700 flex items-center gap-2">
          <i data-lucide="building-2" class="w-5 h-5"></i> ‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
        </h2>
        
        <div class="space-y-6">
          <!-- Enable/Disable -->
          <div class="flex items-center justify-between p-4 bg-green-50 rounded-lg">
            <div>
              <h3 class="font-semibold text-gray-900">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h3>
              <p class="text-sm text-gray-600">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô</p>
            </div>
            <label class="relative inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                id="bank-transfer-enabled"
                ${this.settings?.bank_transfer_enabled ? 'checked' : ''}
                class="sr-only peer"
                onchange="paymentSettingsManager.toggleBankTransfer(this.checked)"
              >
              <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
            </label>
          </div>

          <!-- Bank Accounts -->
          <div id="bank-accounts-section" class="${!this.settings?.bank_transfer_enabled ? 'hidden' : ''}">
            <div class="flex items-center justify-between mb-4">
              <h3 class="font-semibold text-gray-900">‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h3>
              <button 
                type="button" 
                onclick="paymentSettingsManager.addBankAccount()"
                class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm flex items-center"
              >
                <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
              </button>
            </div>

            <div id="bank-accounts-list" class="space-y-4">
              ${this.renderBankAccountsList()}
            </div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
   */
  renderBankOptions(selectedBank = '') {
    const banks = [
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', code: 'BBL', icon: 'https://upload.wikimedia.org/wikipedia/th/8/83/Bangkok_Bank_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢', code: 'KBANK', icon: 'https://upload.wikimedia.org/wikipedia/th/2/25/Kasikornbank_logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', code: 'SCB', icon: 'https://upload.wikimedia.org/wikipedia/th/3/36/SCB_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢', code: 'KTB', icon: 'https://upload.wikimedia.org/wikipedia/th/3/30/Krungthai_Bank_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï', code: 'TTB', icon: 'https://upload.wikimedia.org/wikipedia/th/0/0a/TMBThanachart_Bank_logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', code: 'BAY', icon: 'https://upload.wikimedia.org/wikipedia/th/f/f7/Krungsri_logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ô‡∏≤‡∏Ñ‡∏¥‡∏ô‡∏†‡∏±‡∏ó‡∏£', code: 'KKP', icon: 'https://upload.wikimedia.org/wikipedia/th/d/d8/Kiatnakin_Phatra_Bank_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏µ‡πÑ‡∏≠‡πÄ‡∏≠‡πá‡∏°‡∏ö‡∏µ ‡πÑ‡∏ó‡∏¢', code: 'CIMB', icon: 'https://upload.wikimedia.org/wikipedia/commons/7/7b/CIMB_Bank_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ', code: 'UOB', icon: 'https://upload.wikimedia.org/wikipedia/commons/1/1e/UOB_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡πÅ‡∏ï‡∏ô‡∏î‡∏≤‡∏£‡πå‡∏î‡∏ä‡∏≤‡∏£‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î', code: 'SCBT', icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Standard_Chartered_logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', code: 'GSB', icon: 'https://upload.wikimedia.org/wikipedia/th/0/0b/Government_Savings_Bank_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô', code: 'BAAC', icon: 'https://upload.wikimedia.org/wikipedia/th/7/7e/Bank_for_Agriculture_and_Agricultural_Cooperatives_Logo.svg' },
      { name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏¥‡∏™‡∏•‡∏≤‡∏°‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢', code: 'IBANK', icon: 'https://upload.wikimedia.org/wikipedia/th/a/a6/Islamic_Bank_of_Thailand_Logo.svg' }
    ];

    return banks.map(bank => 
      `<option value="${bank.name}" data-icon="${bank.icon}" data-code="${bank.code}" ${selectedBank === bank.name ? 'selected' : ''}>${bank.name}</option>`
    ).join('');
  }

  /**
   * ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
   */
   renderBankAccountsList() {
    const accounts = this.settings?.bank_accounts || [];
    
    if (accounts.length === 0) {
      return `
        <div class="text-center py-8 text-gray-500">
          <i data-lucide="building-2" class="w-8 h-8 mx-auto mb-2"></i>
          <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</p>
          <p class="text-sm">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ</p>
        </div>
      `;
    }

    return accounts.map((account, index) => `
      <div class="border border-gray-200 rounded-lg p-6 bg-white shadow-sm">
        <!-- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ -->
        <div class="flex items-center justify-between mb-4 pb-3 border-b border-gray-100">
          <h4 class="font-semibold text-gray-900 flex items-center">
            <i data-lucide="building-2" class="w-4 h-4 mr-2 text-green-600"></i>
            ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ #${index + 1}
          </h4>
          <button 
            type="button" 
            onclick="paymentSettingsManager.removeBankAccount(${index})"
            class="px-3 py-1.5 bg-red-50 text-red-600 rounded-lg hover:bg-red-100 text-sm flex items-center transition-colors"
            title="‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ"
          >
            <i data-lucide="trash-2" class="w-4 h-4 mr-1"></i>
            ‡∏•‡∏ö
          </button>
        </div>

        <div class="space-y-4">
          <!-- Row 1: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô -->
          <div class="grid grid-cols-1 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                <i data-lucide="building" class="inline w-4 h-4 mr-1"></i>
                ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
              </label>
              <div class="relative">
                <select 
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 pr-12 text-sm"
                  data-account-index="${index}"
                  data-field="bank_name"
                  onchange="paymentSettingsManager.updateBankAccount(${index}, 'bank_name', this.value); paymentSettingsManager.updateBankIcon(${index}, this);"
                >
                  <option value="">üè¶ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</option>
                  ${this.renderBankOptions(account.bank_name)}
                </select>
                ${account.bank_icon ? `
                  <div class="absolute right-10 top-1/2 transform -translate-y-1/2">
                    <img src="${account.bank_icon}" alt="${account.bank_name}" class="w-6 h-6 object-contain">
                  </div>
                ` : ''}
              </div>
              
              <!-- Custom Icon Upload -->
              <div class="mt-2 p-3 bg-gray-50 rounded-lg">
                <label class="block text-xs font-medium text-gray-600 mb-2">
                  <i data-lucide="upload" class="inline w-3 h-3 mr-1"></i>
                  ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                </label>
                <div class="flex gap-2">
                  <input 
                    type="file" 
                    accept="image/*"
                    class="flex-1 text-xs border border-gray-300 rounded px-2 py-1.5 bg-white file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:bg-gray-100 file:text-gray-700 hover:file:bg-gray-200"
                    onchange="uploadCustomBankIcon(${index}, this)"
                  />
                  ${account.bank_icon ? `
                    <button
                      type="button"
                      onclick="removeBankIcon(${index})"
                      class="px-2 py-1.5 text-xs bg-red-100 text-red-600 rounded hover:bg-red-200 transition-colors flex items-center"
                      title="‡∏•‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô"
                    >
                      <i data-lucide="x" class="w-3 h-3 mr-1"></i>
                      ‡∏•‡∏ö
                    </button>
                  ` : ''}
                </div>
              </div>
            </div>
          </div>

          <!-- Row 2: ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <!-- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                <i data-lucide="user" class="inline w-4 h-4 mr-1"></i>
                ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
              </label>
              <input 
                type="text" 
                value="${account.account_name || ''}"
                placeholder="‡∏ô‡∏≤‡∏¢/‡∏ô‡∏≤‡∏á ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm"
                onchange="paymentSettingsManager.updateBankAccount(${index}, 'account_name', this.value)"
              />
            </div>

            <!-- ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                <i data-lucide="credit-card" class="inline w-4 h-4 mr-1"></i>
                ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
              </label>
              <div class="relative">
                <input 
                  type="text" 
                  value="${account.account_number || ''}"
                  placeholder="xxx-x-xxxxx-x"
                  class="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm font-mono"
                  onchange="paymentSettingsManager.updateBankAccount(${index}, 'account_number', this.value)"
                />
                <button
                  type="button"
                  onclick="copyAccountNumber('${account.account_number || ''}')"
                  class="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 text-gray-500 hover:text-green-600 hover:bg-green-50 rounded transition-colors"
                  title="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
                  ${!account.account_number ? 'disabled' : ''}
                >
                  <i data-lucide="copy" class="w-4 h-4"></i>
                </button>
              </div>
              ${account.account_number ? `
                <p class="text-xs text-gray-500 mt-1 flex items-center">
                  <i data-lucide="info" class="w-3 h-3 mr-1"></i>
                  ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                </p>
              ` : `
                <p class="text-xs text-orange-500 mt-1 flex items-center">
                  <i data-lucide="alert-triangle" class="w-3 h-3 mr-1"></i>
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                </p>
              `}
            </div>
          </div>

          <!-- Row 3: ‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö) -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                <i data-lucide="map-pin" class="inline w-4 h-4 mr-1"></i>
                ‡∏™‡∏≤‡∏Ç‡∏≤ <span class="text-gray-400 text-xs">(‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</span>
              </label>
              <input 
                type="text" 
                value="${account.branch || ''}"
                placeholder="‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å, ‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•, ‡∏Ø‡∏•‡∏Ø"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm"
                onchange="paymentSettingsManager.updateBankAccount(${index}, 'branch', this.value)"
              />
            </div>
            
            <!-- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö -->
            <div class="flex items-end">
              <div class="w-full p-3 bg-blue-50 rounded-lg border border-blue-200">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm font-medium text-blue-800">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</p>
                    <p class="text-xs text-blue-600">
                      ${account.bank_name && account.account_number && account.account_name ? 
                        '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' : 
                        '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö'
                      }
                    </p>
                  </div>
                  ${account.bank_name && account.account_number && account.account_name ? `
                    <div class="text-green-500">
                      <i data-lucide="check-circle" class="w-5 h-5"></i>
                    </div>
                  ` : `
                    <div class="text-orange-500">
                      <i data-lucide="alert-circle" class="w-5 h-5"></i>
                    </div>
                  `}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `).join('');
  }

  /**
   * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
   */
  renderCODSettings() {
    return `
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h2 class="text-xl font-bold mb-6 text-indigo-700 flex items-center gap-2">
          <i data-lucide="truck" class="w-5 h-5"></i> ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (COD)
        </h2>
        
        <div class="space-y-6">
          <!-- Enable/Disable -->
          <div class="flex items-center justify-between p-4 bg-orange-50 rounded-lg">
            <div>
              <h3 class="font-semibold text-gray-900">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</h3>
              <p class="text-sm text-gray-600">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
            </div>
            <label class="relative inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                id="cod-enabled"
                ${this.settings?.cod_enabled ? 'checked' : ''}
                class="sr-only peer"
                onchange="paymentSettingsManager.toggleCOD(this.checked)"
              >
              <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-orange-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-600"></div>
            </label>
          </div>

          <!-- COD Settings -->
          <div id="cod-settings-form" class="${!this.settings?.cod_enabled ? 'hidden' : ''}">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° COD (‡∏ö‡∏≤‡∏ó)</label>
                <input 
                  type="number" 
                  id="cod-fee"
                  value="${this.settings?.cod_fee || 0}"
                  min="0"
                  step="0.01"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="0.00"
                />
                <p class="text-xs text-gray-500 mt-1">‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö COD</p>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">‡∏¢‡∏≠‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö COD (‡∏ö‡∏≤‡∏ó)</label>
                <input 
                  type="number" 
                  id="cod-max-amount"
                  value="${this.settings?.cod_max_amount || 0}"
                  min="0"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î"
                />
                <p class="text-xs text-gray-500 mt-1">‡∏¢‡∏≠‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ COD (0 = ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î)</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   */
  renderAutoVerificationSettings() {
    return `
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h2 class="text-xl font-bold mb-6 text-indigo-700 flex items-center gap-2">
          <i data-lucide="shield-check" class="w-5 h-5"></i> ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        </h2>
        
        <div class="space-y-6">
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="flex">
              <i data-lucide="info" class="w-5 h-5 text-yellow-600 mr-2 mt-0.5"></i>
              <div class="text-sm">
                <p class="text-yellow-800 font-medium">‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï</p>
                <p class="text-yellow-700 mt-1">‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</p>
              </div>
            </div>
          </div>

          <!-- Enable/Disable -->
          <div class="flex items-center justify-between p-4 bg-purple-50 rounded-lg opacity-50">
            <div>
              <h3 class="font-semibold text-gray-900">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</h3>
              <p class="text-sm text-gray-600">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
            </div>
            <label class="relative inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                id="auto-verify-enabled"
                disabled
                class="sr-only peer"
              >
              <div class="w-11 h-6 bg-gray-200 rounded-full peer"></div>
            </label>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
   */
  renderGeneralSettings() {
    return `
      <div class="bg-white rounded-xl shadow-sm p-8">
        <h2 class="text-xl font-bold mb-6 text-indigo-700 flex items-center gap-2">
          <i data-lucide="settings" class="w-5 h-5"></i> ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)</label>
            <input 
              type="number" 
              id="payment-timeout"
              value="${this.settings?.payment_timeout_hours || 24}"
              min="1"
              max="168"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
            <p class="text-xs text-gray-500 mt-1">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
          </div>

          <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h3 class="font-semibold text-gray-900">‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
              <p class="text-sm text-gray-600">‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</p>
            </div>
            <label class="relative inline-flex items-center cursor-pointer">
              <input 
                type="checkbox" 
                id="require-payment-proof"
                ${this.settings?.require_payment_proof ? 'checked' : ''}
                class="sr-only peer"
              >
              <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600"></div>
            </label>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Setup Event Handlers
   */
  setupEventHandlers() {
    // PromptPay QR Type change
    const qrTypeSelect = document.getElementById('promptpay-qr-type');
    if (qrTypeSelect) {
      qrTypeSelect.addEventListener('change', (e) => {
        this.updatePromptPayLabels(e.target.value);
      });
    }
  }

  /**
   * Toggle PromptPay
   */
  togglePromptPay(enabled) {
    const form = document.getElementById('promptpay-settings-form');
    if (form) {
      if (enabled) {
        form.classList.remove('hidden');
      } else {
        form.classList.add('hidden');
      }
    }
  }

  /**
   * Toggle Bank Transfer
   */
  toggleBankTransfer(enabled) {
    const section = document.getElementById('bank-accounts-section');
    if (section) {
      if (enabled) {
        section.classList.remove('hidden');
      } else {
        section.classList.add('hidden');
      }
    }
  }

  /**
   * Toggle COD
   */
  toggleCOD(enabled) {
    const form = document.getElementById('cod-settings-form');
    if (form) {
      if (enabled) {
        form.classList.remove('hidden');
      } else {
        form.classList.add('hidden');
      }
    }
  }

  /**
   * Update PromptPay Labels
   */
  updatePromptPayLabels(type) {
    const label = document.getElementById('promptpay-id-label');
    const input = document.getElementById('promptpay-id');
    
    if (type === 'tax_id') {
      if (label) label.textContent = '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ';
      if (input) input.placeholder = '1234567890123';
    } else {
      if (label) label.textContent = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
      if (input) input.placeholder = '0812345678';
    }
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bank Account ‡πÅ‡∏•‡∏∞ Icon ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
   */
  updateBankIcon(accountIndex, selectElement) {
    const selectedOption = selectElement.options[selectElement.selectedIndex];
    const iconUrl = selectedOption.getAttribute('data-icon');
    
    if (iconUrl && this.settings.bank_accounts[accountIndex]) {
      this.settings.bank_accounts[accountIndex].bank_icon = iconUrl;
      
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      this.refreshBankAccountsList();
    }
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
   */
  async uploadCustomBankIcon(accountIndex, fileInput) {
    const file = fileInput.files[0];
    if (!file) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
    if (file.size > 1024 * 1024) { // 1MB
      Swal.fire({
        icon: 'warning',
        title: '‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1MB'
      });
      fileInput.value = '';
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    if (!file.type.startsWith('image/')) {
      Swal.fire({
        icon: 'warning',
        title: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      });
      fileInput.value = '';
      return;
    }

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      const formData = new FormData();
      formData.append('icon', file);
      formData.append('accountIndex', accountIndex.toString());

      // ‡πÅ‡∏™‡∏î‡∏á loading
      Swal.fire({
        title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
          Swal.showLoading();
        }
      });

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
      const response = await fetch('/api/admin/payment-settings/upload-bank-icon', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (response.ok && result.success) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        if (!this.settings.bank_accounts[accountIndex]) {
          this.settings.bank_accounts[accountIndex] = {};
        }
        this.settings.bank_accounts[accountIndex].bank_icon = result.iconUrl;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        await this.saveAllSettings();

        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        this.refreshBankAccountsList();

        Swal.fire({
          icon: 'success',
          title: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          text: '‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          timer: 1500,
          showConfirmButton: false
        });

      } else {
        throw new Error(result.message || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

    } catch (error) {
      console.error('Error uploading bank icon:', error);
      Swal.fire({
        icon: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
      });
    } finally {
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå input
      fileInput.value = '';
    }
  }

  /**
   * ‡∏•‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
   */
  async removeBankIcon(accountIndex) {
    const result = await Swal.fire({
      title: '‡∏•‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£?',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡∏•‡∏ö',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      confirmButtonColor: '#dc2626'
    });

    if (result.isConfirmed) {
      if (this.settings.bank_accounts[accountIndex]) {
        this.settings.bank_accounts[accountIndex].bank_icon = null;
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        await this.saveAllSettings();
        
        this.refreshBankAccountsList();
        
        Swal.fire({
          icon: 'success',
          title: '‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
          text: '‡∏•‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß',
          timer: 1500,
          showConfirmButton: false
        });
      }
    }
  }

  /**
   * ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
   */
  async copyAccountNumber(accountNumber) {
    if (!accountNumber) {
      Swal.fire({
        icon: 'warning',
        title: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô',
        timer: 1500,
        showConfirmButton: false
      });
      return;
    }

    try {
      await navigator.clipboard.writeText(accountNumber);
      
      // ‡πÅ‡∏™‡∏î‡∏á toast notification ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢
      this.showSuccessToast(`‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${accountNumber} ‡πÅ‡∏•‡πâ‡∏ß`);
      
    } catch (error) {
      console.error('Error copying to clipboard:', error);
      
      // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤
      const textArea = document.createElement('textarea');
      textArea.value = accountNumber;
      document.body.appendChild(textArea);
      textArea.select();
      
      try {
        document.execCommand('copy');
        this.showSuccessToast(`‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${accountNumber} ‡πÅ‡∏•‡πâ‡∏ß`);
      } catch (fallbackError) {
        Swal.fire({
          icon: 'error',
          title: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á: ' + accountNumber
        });
      }
      
      document.body.removeChild(textArea);
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á Success Toast
   */
  showSuccessToast(message) {
    // ‡∏•‡∏ö toast ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const existingToast = document.getElementById('success-toast');
    if (existingToast) {
      existingToast.remove();
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á toast ‡πÉ‡∏´‡∏°‡πà
    const toast = document.createElement('div');
    toast.id = 'success-toast';
    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-3 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-full';
    toast.innerHTML = `
      <div class="flex items-center">
        <i data-lucide="check-circle" class="w-5 h-5 mr-2"></i>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á lucide icons
    if (typeof lucide !== 'undefined') {
      lucide.createIcons();
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á toast
    setTimeout(() => {
      toast.classList.remove('translate-x-full');
    }, 100);
    
    // ‡∏ã‡πà‡∏≠‡∏ô toast ‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      toast.classList.add('translate-x-full');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, 3000);
  }

  /**
   * Generate QR Preview
   */
  async generateQRPreview() {
    const promptpayId = document.getElementById('promptpay-id')?.value;
    const amount = 100; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 100 ‡∏ö‡∏≤‡∏ó
    
    if (!promptpayId) {
      Swal.fire({
        icon: 'warning',
        title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ'
      });
      return;
    }

    const previewContainer = document.getElementById('qr-code-preview');
    if (previewContainer) {
      previewContainer.innerHTML = `
        <div class="text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
          <p class="text-sm text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...</p>
        </div>
      `;

      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
      setTimeout(() => {
        previewContainer.innerHTML = `
          <div class="text-center">
            <div class="w-24 h-24 bg-gray-900 mx-auto mb-2 flex items-center justify-center text-white text-xs">
              QR CODE<br/>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á<br/>${promptpayId}<br/>‡∏ø${amount}
            </div>
            <p class="text-sm text-gray-600">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ø${amount}</p>
          </div>
        `;
      }, 1000);
    }
  }

  /**
   * Save All Settings
   */
  async saveAllSettings() {
    const submitBtn = document.getElementById('save-payment-settings-btn');
    const submitText = document.getElementById('save-payment-settings-text');
    const submitLoading = document.getElementById('save-payment-settings-loading');

    try {
      // Show loading state
      if (submitBtn) submitBtn.disabled = true;
      if (submitText) submitText.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
      if (submitLoading) submitLoading.classList.remove('hidden');

      // Collect all settings
      const settings = this.collectAllSettings();

      console.log('üíæ Saving payment settings:', settings);

      // Send to API
      const response = await fetch('/api/admin/payment-settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(settings)
      });

      const result = await response.json();

      if (response.ok && result.success) {
        await Swal.fire({
          icon: 'success',
          title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
          text: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          timer: 2000,
          showConfirmButton: false
        });

        // Update local settings
        this.settings = settings;

        // Refresh overview
        this.refreshPaymentMethodsOverview();

      } else {
        throw new Error(result.message || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

    } catch (error) {
      console.error('‚ùå Error saving payment settings:', error);
      await Swal.fire({
        icon: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
        text: error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ'
      });

    } finally {
      // Reset button state
      if (submitBtn) submitBtn.disabled = false;
      if (submitText) submitText.textContent = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';
      if (submitLoading) submitLoading.classList.add('hidden');
    }
  }

  /**
   * Collect All Settings from Form
   */
  collectAllSettings() {
    return {
      // PromptPay
      promptpay_enabled: document.getElementById('promptpay-enabled')?.checked || false,
      promptpay_qr_type: document.getElementById('promptpay-qr-type')?.value || 'phone',
      promptpay_id: document.getElementById('promptpay-id')?.value || '',
      promptpay_name: document.getElementById('promptpay-name')?.value || '',

      // Bank Transfer
      bank_transfer_enabled: document.getElementById('bank-transfer-enabled')?.checked || false,
      bank_accounts: this.settings?.bank_accounts || [],

      // COD
      cod_enabled: document.getElementById('cod-enabled')?.checked || false,
      cod_fee: parseFloat(document.getElementById('cod-fee')?.value || 0),
      cod_max_amount: parseFloat(document.getElementById('cod-max-amount')?.value || 0),

      // Auto Verification
      auto_verify_enabled: false, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

      // General
      payment_timeout_hours: parseInt(document.getElementById('payment-timeout')?.value || 24),
      require_payment_proof: document.getElementById('require-payment-proof')?.checked || true
    };
  }

  /**
   * Refresh Payment Methods Overview
   */
  refreshPaymentMethodsOverview() {
    // Implementation for refreshing the overview section
    // This would typically re-render the overview section with updated data
    console.log('üîÑ Refreshing payment methods overview...');
  }

  /**
   * Reset Settings
   */
  async resetSettings() {
    const result = await Swal.fire({
      title: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤?',
      text: '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      confirmButtonColor: '#dc2626'
    });

    if (result.isConfirmed) {
      this.settings = this.getDefaultSettings();
      await this.renderPaymentSettingsPage();
      
      Swal.fire({
        icon: 'success',
        title: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
        text: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        timer: 1500,
        showConfirmButton: false
      });
    }
  }

  /**
   * Render Loading State
   */
  renderLoadingState() {
    return `
      <div class="flex items-center justify-center h-64">
        <div class="text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p class="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...</p>
        </div>
      </div>
    `;
  }

  /**
   * Render Error State
   */
  renderErrorState(errorMessage) {
    const mainContent = document.getElementById('main-content');
    if (mainContent) {
      mainContent.innerHTML = `
        <div class="text-center py-12">
          <div class="text-red-500 mb-4">
            <i data-lucide="alert-circle" class="w-12 h-12 mx-auto mb-2"></i>
            <h3 class="text-lg font-medium">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
            <p class="text-sm mt-2">${errorMessage}</p>
          </div>
          <button 
            onclick="paymentSettingsManager.renderPaymentSettingsPage()" 
            class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg"
          >
            ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </button>
        </div>
      `;
      
      // Re-initialize icons
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
  }

  /**
   * Add Bank Account
   */
  addBankAccount() {
    if (!this.settings.bank_accounts) {
      this.settings.bank_accounts = [];
    }

    this.settings.bank_accounts.push({
      bank_name: '',
      account_number: '',
      account_name: '',
      branch: '',
      bank_icon: null
    });

    this.refreshBankAccountsList();
    
    // Scroll to new account
    setTimeout(() => {
      const newAccountElement = document.querySelector('[data-account-index="' + (this.settings.bank_accounts.length - 1) + '"]');
      if (newAccountElement) {
        newAccountElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }, 100);
  }

  /**
   * Remove Bank Account
   */
  async removeBankAccount(index) {
    const result = await Swal.fire({
      title: '‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£?',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡∏•‡∏ö',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
      confirmButtonColor: '#dc2626'
    });

    if (result.isConfirmed) {
      if (this.settings.bank_accounts && this.settings.bank_accounts[index]) {
        this.settings.bank_accounts.splice(index, 1);
        this.refreshBankAccountsList();
        
        Swal.fire({
          icon: 'success',
          title: '‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
          text: '‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß',
          timer: 1500,
          showConfirmButton: false
        });
      }
    }
  }

  /**
   * Update Bank Account
   */
  updateBankAccount(index, field, value) {
    if (this.settings.bank_accounts && this.settings.bank_accounts[index]) {
      this.settings.bank_accounts[index][field] = value;
    }
  }

  /**
   * Refresh Bank Accounts List
   */
  refreshBankAccountsList() {
    const container = document.getElementById('bank-accounts-list');
    if (container) {
      container.innerHTML = this.renderBankAccountsList();
      
      // ‡πÇ‡∏´‡∏•‡∏î lucide icons ‡πÉ‡∏´‡∏°‡πà
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
  }
}





// Export class to global scope
window.PaymentSettingsManager = PaymentSettingsManager;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance global
if (!window.paymentSettingsManager) {
  window.paymentSettingsManager = new PaymentSettingsManager();
}

// ‚úÖ Export methods to global scope ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö onclick handlers
window.uploadCustomBankIcon = function(accountIndex, fileInput) {
  if (window.paymentSettingsManager) {
    window.paymentSettingsManager.uploadCustomBankIcon(accountIndex, fileInput);
  } else {
    console.error('PaymentSettingsManager not initialized');
  }
};

window.removeBankIcon = function(accountIndex) {
  if (window.paymentSettingsManager) {
    window.paymentSettingsManager.removeBankIcon(accountIndex);
  } else {
    console.error('PaymentSettingsManager not initialized');
  }
};

window.copyAccountNumber = function(accountNumber) {
  if (window.paymentSettingsManager) {
    window.paymentSettingsManager.copyAccountNumber(accountNumber);
  } else {
    console.error('PaymentSettingsManager not initialized');
  }
};

window.addBankAccount = function() {
  if (window.paymentSettingsManager) {
    window.paymentSettingsManager.addBankAccount();
  } else {
    console.error('PaymentSettingsManager not initialized');
  }
};

window.removeBankAccount = function(index) {
  if (window.paymentSettingsManager) {
    window.paymentSettingsManager.removeBankAccount(index);
  } else {
    console.error('PaymentSettingsManager not initialized');
  }
};

window.updateBankAccount = function(index, field, value) {
  if (window.paymentSettingsManager) {
    window.paymentSettingsManager.updateBankAccount(index, field, value);
  } else {
    console.error('PaymentSettingsManager not initialized');
  }
};

window.updateBankIcon = function(accountIndex, selectElement) {
  if (window.paymentSettingsManager) {
    window.paymentSettingsManager.updateBankIcon(accountIndex, selectElement);
  } else {
    console.error('PaymentSettingsManager not initialized');
  }
};

console.log('üí≥ Payment Settings Manager loaded successfully');